{"version":3,"sources":["Components/PersonForm.js","Components/PhonebookEntry.js","Components/Persons.js","Components/Filter.js","Components/UserNotification.js","backEnd.js","App.js","index.js"],"names":["PersonForm","props","onSubmit","handleSubmit","value","newName","onChange","handleNameChange","type","newNumber","handleNumberChange","PhonebookEntry","person","deletePerson","className","name","number","onClick","id","Persons","persons","map","Filter","filter","handleFilterChange","UserNotification","message","userMessage","baseUrl","backEnd","getAll","axios","get","then","response","data","create","newObject","post","deleteFromDB","handleFail","delete","catch","error","console","log","update","updatedPerson","put","App","useState","setPersons","setNewNumber","setNewName","setFilter","setUserMessage","removeUserMessage","setTimeout","personsToShow","toLowerCase","indexOf","useEffect","initialPersons","e","target","preventDefault","nameToAdd","trim","findIndex","window","confirm","personToUpdate","find","updatePhoneNumber","decidedID","length","parseInt","newPerson","concat","personCopy","i","splice","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a6751449.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst PersonForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n          name: \r\n          <input \r\n            value={props.newName}\r\n            onChange={props.handleNameChange}\r\n            type=\"text\" />\r\n        </div>\r\n        <div>\r\n          number:\r\n          <input\r\n            value={props.newNumber}\r\n            onChange={props.handleNumberChange} \r\n            type=\"text\" />\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n      </form>\r\n    )\r\n}\r\n\r\nexport default PersonForm;","import React from 'react';\r\n\r\n\r\nconst PhonebookEntry = ({person, deletePerson}) => {\r\n    return (\r\n        <li className=\"phoneBookEntry\">\r\n            {person.name} {person.number}\r\n            <button \r\n              onClick={() => deletePerson(person)} \r\n              name={person.id}>delete\r\n            </button>\r\n            \r\n        </li>\r\n    )\r\n}\r\n\r\nexport default PhonebookEntry;","import React from 'react';\r\nimport PhonebookEntry from './PhonebookEntry';\r\n\r\n\r\nconst Persons = ({persons, deletePerson}) => {\r\n    return (\r\n        <ul>\r\n        {persons.map(person => {\r\n          //console.log(`This is ${person.name}, number ${person.number}, id ${person.id}`)\r\n          return (\r\n            <PhonebookEntry\r\n              key={person.id}\r\n              person={person}\r\n              deletePerson={deletePerson}/>\r\n          )\r\n        }\r\n        )} \r\n      </ul>\r\n    )\r\n}\r\nexport default Persons;","import React from 'react'\r\n\r\nconst Filter = (props) => {\r\n    return (\r\n        <div>\r\n            Filter names with\r\n            <input \r\n                value={props.filter}\r\n                onChange={props.handleFilterChange}\r\n                type=\"text\">\r\n            </input>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filter;","import React from 'react';\r\n\r\nconst UserNotification = ({userMessage}) => {\r\n    let message, className;\r\n    ({message, className} = userMessage);\r\n    if (message === null) {\r\n        return null;\r\n    }\r\n    return (\r\n        <div className={className}>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserNotification;","import axios from 'axios';\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl);\r\n    return request.then(response => response.data);\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject);\r\n    return request.then(response => response.data);\r\n}\r\n\r\nconst deleteFromDB = (id, handleFail) => {\r\n        // const request = axios.get(baseUrl);\r\n        // const res = request.then(response => response.data);\r\n        // console.log(res.then(arr => arr.length));\r\n        axios.delete(`${baseUrl}/${id}`)\r\n        .catch(error => {\r\n            console.log(error);\r\n            handleFail();\r\n        })        \r\n}\r\n\r\nconst update = (updatedPerson) => {\r\n    //console.log(`${baseUrl}/${updatedPerson.id}`)\r\n    const request = axios.put(`${baseUrl}/${updatedPerson.id}`, updatedPerson);\r\n    return request.then(response => response.data);\r\n}\r\n\r\nconst backEnd = { getAll, create, deleteFromDB, update };\r\n\r\n\r\nexport default backEnd;\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport PersonForm from './Components/PersonForm';\r\nimport Persons from './Components/Persons'\r\nimport Filter from './Components/Filter'\r\nimport UserNotification from './Components/UserNotification'\r\nimport backEnd from './backEnd'\r\n\r\nconst App = () => {\r\n  \r\n  const [persons, setPersons] = useState([]);\r\n\r\n  const [newNumber, setNewNumber] = useState('');\r\n  const [newName, setNewName] = useState('');\r\n  const [filter, setFilter] = useState('');\r\n  const [userMessage, setUserMessage] = useState({ message: null, className: ''});\r\n  \r\n  //Event handlers for onChange events when user types something in the input elements\r\n  const handleNameChange = (e) => {\r\n    setNewName(e.target.value);\r\n  };\r\n  const handleNumberChange = (e) => {\r\n    setNewNumber(e.target.value);\r\n  }\r\n  const handleFilterChange = (e) => {\r\n    //set filter to lowercase right away\r\n    setFilter(e.target.value);\r\n  }\r\n\r\n  const removeUserMessage = () => {\r\n    setTimeout(() => {\r\n      setUserMessage({ message: null, className:\"\"})\r\n    }, 3000)\r\n  }\r\n\r\n  //function for checking if a person is already added with newName when submitting\r\n  function isPersonAlreadyAdded(name) {\r\n    let foundIndex;\r\n    foundIndex = persons.findIndex(function(person) {\r\n      return name === person.name;\r\n    })\r\n    if (foundIndex === - 1) {\r\n      return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  //function for copying and adding a new phonenumber to a persons object -> returns the updated person\r\n  function updatePhoneNumber(name, number) {\r\n    let personToUpdate = persons.find(person => person.name === name);\r\n    let updatedPerson = {...personToUpdate, number: number}\r\n    return updatedPerson;\r\n  }\r\n\r\n  //Event handler for adding a person object to the persons list\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    //If name is already added, offer the user a chance to update the number (exercise 2.18)\r\n    //Get rid of unnecessary whitespace at this point with .trim()\r\n    const nameToAdd = newName.trim();\r\n    //console.log(`Now newName is ${newName} (${newName.length} chars), while trimmed nameToAdd is ${nameToAdd}, with ${nameToAdd.length} chars`)\r\n\r\n    if (isPersonAlreadyAdded(nameToAdd)) {\r\n      if(window.confirm(`${nameToAdd} is already in the notebook. Do you want to replace the old number with the new one (${newNumber})?`)) {\r\n        let updatedPerson = updatePhoneNumber(nameToAdd, newNumber);\r\n        backEnd.update(updatedPerson)\r\n          .then(updatedPerson => {\r\n            setPersons(persons.map(person => person.id !== updatedPerson.id ? person : updatedPerson))\r\n          })\r\n          setUserMessage({ message: `Updated the number of ${updatedPerson.name} succesfully!`, className: \"userMsg userAddedSuccess\"})\r\n          removeUserMessage();\r\n      }\r\n      setNewName('');\r\n      setNewNumber('');\r\n      \r\n    } else {\r\n        //Avoid adding same ID after deleting a person by using the last id on the persons-array + 1 unless empty array\r\n        const decidedID = persons.length > 0 ? parseInt(persons[persons.length - 1].id) + 1 : 1;\r\n        \r\n        const newPerson = {\r\n          name: nameToAdd,\r\n          number: newNumber,\r\n          id: decidedID\r\n        }\r\n        \r\n    \r\n        backEnd.create(newPerson)\r\n          .then(newPerson => {\r\n            setPersons(persons.concat(newPerson));\r\n            setNewName('');\r\n            setNewNumber('');\r\n            setUserMessage({ message: `Added ${newPerson.name} succesfully!`, className: \"userMsg userAddedSuccess\"})\r\n            removeUserMessage();  \r\n          })\r\n      }\r\n  };\r\n\r\n  function deleteFailed(name) {\r\n    setUserMessage({ message: `Information of ${name} was already removed from the server`, className: \"userMsg deleteFailed\"})\r\n    removeUserMessage(); \r\n  }\r\n\r\n  const deletePerson = (person) => {\r\n    if(window.confirm(`Are you sure you want to delete ${person.name}?`)) {\r\n      backEnd.deleteFromDB(person.id, () => deleteFailed(person.name));\r\n      let personCopy = [...persons];\r\n      console.log(\"Value of state persons before splice:\", personCopy.length)\r\n      for(let i = 0; i < persons.length; i++) {\r\n        if(persons[i].id === person.id) {\r\n          personCopy.splice(i, 1)\r\n        }\r\n      }\r\n      setPersons(personCopy);\r\n      \r\n    }\r\n  }\r\n  \r\n\r\n  //Check if filter is not empty -> filter the correct persons to show\r\n\r\n  //If filter is an empty string, we just want to display the full array\r\n  let personsToShow = persons;\r\n\r\n  //If filter is not empty, filter the correct person objects\r\n  if (filter) {\r\n    personsToShow = persons.filter(person => {\r\n      return person.name.toLowerCase().indexOf(filter.toLowerCase()) !== -1;\r\n    })\r\n  }\r\n\r\n  //render the initial persons from db.json using useEffect, happens once after the initial render so we \r\n  //add the empty array as the second argument for the useEffect-function\r\n  useEffect(() => {\r\n    backEnd\r\n      .getAll()\r\n      .then(initialPersons => {\r\n        setPersons(initialPersons);\r\n      })\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"wrapper\">\r\n      <h2>Phonebook</h2>\r\n      <UserNotification\r\n        userMessage={userMessage} />\r\n      \r\n      <Filter\r\n        filter={filter} \r\n        handleFilterChange={handleFilterChange} />\r\n      \r\n      <h3>Add a new person to the phonebook</h3>\r\n      <PersonForm \r\n        handleSubmit={handleSubmit} \r\n        handleNameChange={handleNameChange} \r\n        handleNumberChange={handleNumberChange}\r\n        newName={newName}\r\n        newNumber={newNumber}\r\n        />\r\n\r\n      <h3>Numbers</h3>\r\n      <Persons \r\n        persons={personsToShow} \r\n        deletePerson={deletePerson}/>\r\n    </div>\r\n  )\r\n  \r\n}\r\n\r\nexport default App;\r\n","import ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './index.css';\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n"],"sourceRoot":""}